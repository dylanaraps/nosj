#!/usr/bin/env bash
#
# nosj - json parser in pure bash

tokenize() {
    while read -rn 1 char; do
        case $char in
            \{|\}|\[|\]|,)
                [[ $string == 1 ]] && j+=$char
                [[ $string != 1 ]] && { tokens+=("$j" "$char"); j=; }
            ;;

            :)
                [[ $string == 1 ]] && j+=:
                [[ $string != 1 ]] && j+=%%:::%%
            ;;

            [[:space:]])
                [[ $string == 1 ]] && j+=$char
            ;;

            \"|\')
                ((string=string==1?0:1))
            ;;

            *) j+=$char ;;
        esac
    done < "$1"
}

parse() {
    for ((i=0;i<${#tokens[@]};i++)) {
        case ${tokens[i]} in
            \{|\[)
                objects+=("${tokens[i-1]}")
            ;;

            \}|\])
                unset 'objects[-1]'
            ;;

            *"%%:::%%"*)
                key=${objects[*]//'%%:::%%'/.}${tokens[i]/'%%:::%%'*}
                key_plain=index_${key//[^A-Za-z0-9]/_}
                val=${tokens[i]/*'%%:::%%'}

                if [[ -n ${nosj[$key]} ]]; then
                    declare -i "$key_plain+=1"
                    declare -xg "nosj[${key}[${!key_plain}]]=$val"

                    [[ -n ${nosj[${key}[0]]} ]] ||
                        declare -xg "nosj[${key}[0]]=${nosj[$key]}"

                elif [[ $val ]]; then
                    declare -xg "nosj[$key]=$val"
                fi
            ;;
        esac
    }

    printf 'nosj[%s]\n' "${!nosj[@]}"
}

main() {
    declare -Axg nosj=()
    tokenize "${1:-/dev/stdin}"
    parse
}

IFS= main "$@"
