#!/usr/bin/env bash
#
# nosj - json parser in pure bash

tokenize() {
    while read -rn 1 char; do
        case $char in
            [\{\}\[\],])
                [[ $string ]] && j+=$char
                [[ $string ]] || { tokens+=("$j" "$char"); j=; }
            ;;

            :)
                [[ $string ]] && j+=:
                [[ $string ]] || j+=%%:::%%
            ;;

            [[:space:]])
                [[ $string ]] && j+=$char
            ;;

            [\"\'])
                if [[ $string ]]; then
                    string=
                else
                    string=1
                fi

                [[ ${j: -1} == \\ ]] && {
                    string=1
                    j+=$char
                }
            ;;

            *) j+=$char ;;
        esac
    done < "$1"
}

parse() {
    for ((i=0;i<${#tokens[@]};i++)) {
        case ${tokens[i]} in
            \{|\[)
                objects+=("${tokens[i-1]}")
            ;;

            \}|\])
                unset 'objects[-1]'
            ;;

            *"%%:::%%"*)
                key=${objects[*]//'%%:::%%'/.}${tokens[i]/'%%:::%%'*}
                key=${key}
                key_plain=index_${key//[^A-Za-z0-9]/_}
                val=${tokens[i]/*'%%:::%%'}

                if [[ -n ${nosj[$key]} ]]; then
                    declare -i "$key_plain+=1"
                    nosj["${key}[${!key_plain}]"]=$val

                    [[ -n ${nosj[${key}[0]]} ]] ||
                        nosj["${key}[0]"]=${nosj[$key]}

                elif [[ $val ]]; then
                    nosj["$key"]=$val
                fi
            ;;
        esac
    }

    printf 'nosj[%s]\n' "${!nosj[@]}"
}

main() {
    declare -Axg nosj=()
    tokenize "${1:-/dev/stdin}"
    parse
}

LANG=C LC_ALL=C IFS= main "$1"
