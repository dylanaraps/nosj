#!/usr/bin/env bash
#
# nosj - json parser in pure bash

tokenize() {
    local j str

    while read -rN 1; do
        case $REPLY in
            [\{\}\[\],])
                [[ $str ]] && j+=$REPLY
                [[ $str ]] || { tokens+=("$j" "$REPLY"); j=; }
            ;;

            :)
                [[ $str ]] && j+=:
                [[ $str ]] || j+='\ '
            ;;

            [[:space:]])
                [[ $str ]] && j+=$REPLY
            ;;

            [\"\'])
                [[ $str ]] && str= || str=1
                [[ ${j: -1} == \\ ]] && { str=1; j+=$REPLY; }
            ;;

            *) j+=$REPLY ;;
        esac
    done
}

parse() {
    local i key key_plain nosj objects out val

    declare -A nosj

    for ((i=0;i<${#tokens[@]};i++)) {
        case ${tokens[i]} in
            \{|\[)
                objects+=("${tokens[i-1]}")
            ;;

            \}|\])
                unset 'objects[-1]'
            ;;

            *\\\ *)
                key=${objects[*]//\\ /.}${tokens[i]/\\ *}
                key=${key//!//\\!}
                key=${key//\$//\\\$}
                key_plain=index_${key//[^A-Za-z0-9]/_}
                val=${tokens[i]/*\\ }

                if [[ -n ${nosj[$key]} ]]; then
                    [[ -n ${nosj[${key}[0]]} ]] || {
                        nosj["${key}[0]"]=${nosj[$key]}
                        out+=("nosj[\"${key}[0]\"]='${nosj[$key]}'")
                    }

                    declare -i "$key_plain+=1"
                    nosj["${key}[${!key_plain}]"]=$val
                    out+=("nosj[\"${key}[${!key_plain}]\"]='$val'")

                elif [[ $val ]]; then
                    nosj["$key"]=$val
                    out+=("nosj[\"$key\"]='$val'")
                fi
            ;;
        esac
    }

    printf '%s\n%s\n' "declare -A nosj" "${out[@]}"
}

main() {
    tokenize < "${1:-/dev/stdin}"
    parse
}

LANG=C LC_ALL=C IFS= main "$1"
